/**
    The Index, home page component
      - uses getStaticProps to then use Mongoose to fetch blog data from the database
 */

import Head from "next/head";
import BlogItem from "../components/blogItem/BlogItem";

import { Fragment } from "react";
import controllerBlog from "../utils/controllerBlog";

import styles from "../styles/Home.module.css";


// export async function getServerSideProps( context ) {
// /**
//       With this function exported from our page, NextJS is going to prerender this page for every single request using the data
//       from getServerSideProps()

//       Takes in param, context, and these params are if the page has dynamic routes. So it also has access to the requests and
//       the response objects.

//       With context, we can get request headers, the request methods, and the request body.
// */

export async function getStaticProps(context) {
  /**
      This function runs on the server, and inside this function we can do server side code. 
      Also can do this:
        - send requests to a backend api
        - read the file syste,
        - securely connect to a database


      Returning an object inside getStaticProps, this object could be props. Whatever
      you return as props, is going to be passed over to this component as props

      Before this page is built, NextJs is going to fetch this data and add it to 
      components as props
 */

  const blogPosts = await controllerBlog.getBlogEntries()

  return {
    props: {
      blogPosts: blogPosts.map( post => {
        return {
          title: post.title,
          description: post.description,
          details: post.details,
          image: post.image,
          slug: post.slug
        }
      }),
    },
    /**
        Revalidate is the time to take for our page to be prerendered. The default is false, but if we were to give it a time, on 
        every page, React is going to automatically prerender our page for the number of times we give it.

        This has to do with incremental static regeneration. If we set it to false, means that there will be no revalidation 
        and the page will be cached. 
        
        If we give it 60s, when requests reach this page, means every minute, nextJS is going to regenerate a page on the server.
     */
    revalidate: 3600,
  };
}

export default function Home(props) {

  return (

    /**
        React fragments serve as a cleaner alternative to using unnecessary divs in our code. These fragments do not produce any 
        extra elements in the DOM, which means that a fragment's child components will render without any wrapping DOM node.
     */
    <Fragment>
    
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />

        <link
          href="https://fonts.googleapis.com/css2?family=Montserrat&family=Old+Standard+TT:ital,wght@0,400;0,700;1,400&display=swap"
          rel="stylesheet"
        />
      </Head>

      <main className={styles.main}>

        <h1>BLOG Page | The Home Page bitches</h1>

        {/* START BLOGPOST CARDS */}
        {props.blogPosts.map((post, index) => {
          return (
            <div key={index} className="flex flex-col">
              <BlogItem
                image={post.image}
                title={post.title}
                description={post.description}
                details={post.details}
                slug={post.slug}
              />

            </div>
          );
        })}
        {/* END BLOGPOST CARDS */}

      </main>

    </Fragment>

);
}
